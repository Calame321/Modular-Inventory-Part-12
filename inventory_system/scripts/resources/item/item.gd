class_name Item extends Resource

signal placed_in_inventory()
signal quantity_changed( quantity )
signal depleted()

var id : String
var type # Game_Enums.ITEM_TYPE
var name : String
var rarity = Game_Enums.RARITY.NORMAL
var equipment_type = Game_Enums.EQUIPMENT_TYPE.NONE
var stack_size : int = 1
var quantity : int = 1 setget set_quantity
var level : int = 1
var components = {}
var unique_data = null

var slot # Inventory_Slot

# Set the new quantity and deal with signals.
func set_quantity( value ):
	quantity = value
	emit_signal( "quantity_changed", quantity )
	
	if quantity <= 0:
		emit_signal( "depleted" )

# Add the given quantity to the item.
# Return the reminder if the stack is full.
func add_item_quantity( value ):
	var remainder = quantity + value - stack_size
	quantity = int( min( quantity + value, stack_size ) )
	set_quantity( quantity )
	return remainder

# Get the name of the item.
# Normal -> The name of the base.
# Magic -> Prefix + Name + Suffix.
# Rare | Unique -> The name generated by the rarity.
func get_name():
	if components.has( "affix_list" ) and rarity == Game_Enums.RARITY.MAGIC:
		var prefix = ""
		var suffix = ""
		
		for affix_item in components.affix_list.affixes:
			if affix_item.affix_group.type == Game_Enums.AFFIX_TYPE.PREFIX:
				prefix = affix_item.affix.affix_name
			else:
				suffix = affix_item.affix.affix_name
		return ( "%s %s %s" % [ prefix, name, suffix ] ).strip_edges()
	return name

# If this item is on the player.
func is_on_player() -> bool:
	return slot and slot.groups.has( "player" )

# Pack the item data in a Dictionary.
func get_data():
	var data = {
		"id" : id,
		"item_name" : name,
		"rarity" : rarity,
		"quantity": quantity,
		"components": {}
	}
	
	for c in components:
		if components[ c ].has_method( "get_data" ):
			data.components[ c ] = components[ c ].get_data()
	return data

# Calculate the total for a specific stat.
func get_stat( stat ):
	var total = 0
	for c in components:
		if components[ c ].has_method( "get_stat" ):
			total += components[ c ].get_stat( stat )
	return total
